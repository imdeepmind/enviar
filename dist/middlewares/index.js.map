{"version":3,"sources":["../../app/middlewares/index.js"],"names":["checkAuth","req","res","next","token","headers","jwt","verify","config","JWT_TOKEN","err","authData","logger","error","badImplementation","messages","findQuery","$eq","mongoose","Types","ObjectId","obj_id","username","hash","selected","_id","userModel","findOne","doc","boom","debug","unauthorized","upload","dest","limits","fileSize","fileFilter","file","callback","ext","path","extname","originalname","Error","uploadPostImage","resizeImage","name","split","resize","toFile","then","_","catch","resizePostImage"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,gCAAY,SAAZA,SAAY,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzC,QAAMC,QAAQH,IAAII,OAAJ,CAAY,eAAZ,CAAd;;AAEA,QAAID,KAAJ,EAAU;AACNE,+BAAIC,MAAJ,CAAWH,KAAX,EAAkBI,iBAAOC,SAAzB,EAAoC,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACnD,gBAAID,GAAJ,EAAQ;AACJE,iCAAOC,KAAP,CAAa,aAAb,EAA4BH,GAA5B;AACA,uBAAOR,IAAIY,iBAAJ,CAAsBC,mBAAS,QAAT,CAAtB,CAAP;AACH;AACD,gBAAMC,YAAY;AACd,uBAAQ,EAACC,KAAKC,mBAASC,KAAT,CAAeC,QAAf,CAAwBT,SAASU,MAAjC,CAAN,EADM;AAEd,4BAAa,EAACJ,KAAKN,SAASW,QAAf,EAFC;AAGd,6BAAc,EAACL,KAAKN,SAASY,IAAf;AAHA,aAAlB;;AAMA,gBAAMC,WAAW,EAACC,KAAK,CAAN,EAAjB;;AAEAC,4BAAUC,OAAV,CAAkBX,SAAlB,EAA6BQ,QAA7B,EAAuC,UAACd,GAAD,EAAMkB,GAAN,EAAc;AACjD,oBAAIlB,GAAJ,EAAS;AACLE,qCAAOC,KAAP,CAAa,kBAAb,EAAiCH,GAAjC;AACA,2BAAOR,IAAI2B,IAAJ,CAASf,iBAAT,CAA2BC,mBAAS,QAAT,CAA3B,CAAP;AACH,iBAHD,MAGO,IAAIa,GAAJ,EAAS;AACZ3B,wBAAIU,QAAJ,GAAeA,QAAf;AACAR;AACH,iBAHM,MAGA;AACHS,qCAAOkB,KAAP,8BAAwCnB,SAASW,QAAjD;AACA,2BAAOpB,IAAI2B,IAAJ,CAASE,YAAT,CAAsBhB,mBAAS,QAAT,CAAtB,CAAP;AACH;AACJ,aAXD;AAYH,SAzBD;AA0BH,KA3BD,MA2BO;AACHH,yBAAOkB,KAAP;AACA,eAAO5B,IAAI2B,IAAJ,CAASE,YAAT,CAAsBhB,mBAAS,QAAT,CAAtB,CAAP;AACH;AACJ,CAlCM;;AAoCA,IAAMiB,0BAAS,sBAAO;AACzBC,UAAM,aADmB;AAEzBC,YAAQ;AACJC,kBAAU,OAAO;AADb,KAFiB;AAKzBC,gBAAY,oBAACnC,GAAD,EAAMoC,IAAN,EAAYC,QAAZ,EAAyB;AACjC,YAAIC,MAAMC,eAAKC,OAAL,CAAaJ,KAAKK,YAAlB,CAAV;AACA,YAAGH,QAAQ,MAAR,IAAkBA,QAAQ,MAA1B,IAAoCA,QAAQ,MAA5C,IAAsDA,QAAQ,OAAjE,EAA0E;AACtE3B,6BAAOkB,KAAP,CAAa,eAAb;AACA,mBAAOQ,SAAS,IAAIK,KAAJ,CAAU,yBAAV,CAAT,CAAP;AACH;AACD/B,yBAAOkB,KAAP,CAAa,iBAAb;AACAQ,iBAAS,IAAT,EAAe,IAAf;AACH;AAbwB,CAAP,CAAf;;AAgBA,IAAMM,4CAAkB,sBAAO;AAClCX,UAAM,YAD4B;AAElCC,YAAQ;AACJC,kBAAU,OAAO;AADb,KAF0B;AAKlCC,gBAAY,oBAACnC,GAAD,EAAMoC,IAAN,EAAYC,QAAZ,EAAyB;AACjC,YAAIC,MAAMC,eAAKC,OAAL,CAAaJ,KAAKK,YAAlB,CAAV;AACA,YAAGH,QAAQ,MAAR,IAAkBA,QAAQ,MAA1B,IAAoCA,QAAQ,MAA5C,IAAsDA,QAAQ,OAAjE,EAA0E;AACtE3B,6BAAOkB,KAAP,CAAa,eAAb;AACA,mBAAOQ,SAAS,IAAIK,KAAJ,CAAU,yBAAV,CAAT,CAAP;AACH;AACD/B,yBAAOkB,KAAP,CAAa,iBAAb;AACAQ,iBAAS,IAAT,EAAe,IAAf;AACH;AAbiC,CAAP,CAAxB;;AAgBA,IAAMO,oCAAc,SAAdA,WAAc,CAAC5C,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACzC,QAAMqC,OAAOvC,IAAIoC,IAAJ,CAASG,IAAtB;AACA,QAAMM,OAAON,KAAKO,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAb;;AAEA,yBAAMP,IAAN,EACCQ,MADD,CACQ,GADR,EACa,GADb,EACkB,EADlB,EAECC,MAFD,CAEQ,qBAAqBH,IAF7B,EAGCI,IAHD,CAGM,UAACC,CAAD,EAAO;AACTvC,yBAAOkB,KAAP,CAAa,2BAAb;AACA,6BAAMU,IAAN,EACCQ,MADD,CACQ,EADR,EACY,EADZ,EACgB,EADhB,EAECC,MAFD,CAEQ,mBAAmBH,IAF3B,EAGCI,IAHD,CAGM,UAACC,CAAD,EAAO;AACTvC,6BAAOkB,KAAP,CAAa,yBAAb;AACA3B;AACH,SAND;AAOH,KAZD,EAaCiD,KAbD,CAaO,eAAO;AACVxC,yBAAOC,KAAP,CAAa,+BAAb,EAA8CH,GAA9C;AACH,KAfD;AAgBH,CApBM;;AAsBA,IAAM2C,4CAAkB,SAAlBA,eAAkB,CAACpD,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAC7C,QAAMqC,OAAOvC,IAAIoC,IAAJ,CAASG,IAAtB;AACA,QAAMM,OAAON,KAAKO,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAb;;AAEA,yBAAMP,IAAN,EACCQ,MADD,CACQ,GADR,EACa,GADb,EACkB,EADlB,EAECC,MAFD,CAEQ,oBAAoBH,IAF5B,EAGCI,IAHD,CAGM,UAACC,CAAD,EAAO;AACTvC,yBAAOkB,KAAP,CAAa,2BAAb;AACA3B;AACH,KAND,EAOCiD,KAPD,CAOO,eAAO;AACVxC,yBAAOC,KAAP,CAAa,+BAAb,EAA8CH,GAA9C;AACH,KATD;AAUH,CAdM","file":"index.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport mongoose from 'mongoose';\nimport multer from 'multer';\nimport path from 'path';\nimport sharp from 'sharp';\n\nimport config from '../config';\nimport messages from '../messages';\nimport userModel from '../models/users';\nimport logger from '../utils/logger';\n\nexport const checkAuth = (req, res, next) => {\n    const token = req.headers['authorization'];\n    \n    if (token){\n        jwt.verify(token, config.JWT_TOKEN, (err, authData) => {\n            if (err){\n                logger.error('JWT Error: ', err);\n                return res.badImplementation(messages['m500.0']);\n            }\n            const findQuery = {\n                '_id' : {$eq: mongoose.Types.ObjectId(authData.obj_id)},\n                'username' : {$eq: authData.username},\n                'tokenHash' : {$eq: authData.hash}\n            }\n\n            const selected = {_id: 1}\n\n            userModel.findOne(findQuery, selected, (err, doc) => {\n                if (err) {\n                    logger.error('Database Error: ', err);\n                    return res.boom.badImplementation(messages['m500.0']);\n                } else if (doc) {\n                    req.authData = authData;\n                    next();\n                } else {\n                    logger.debug(`Unauthorized: User with ${authData.username} does not exist`);\n                    return res.boom.unauthorized(messages['m401.1']);\n                }\n            }) \n        });\n    } else {\n        logger.debug(`Does not have any token`);\n        return res.boom.unauthorized(messages['m401.1']);\n    }\n}\n\nexport const upload = multer({\n    dest: 'images/raw/',\n    limits: {\n        fileSize: 1024 * 1024\n    },\n    fileFilter: (req, file, callback) => {\n        let ext = path.extname(file.originalname);\n        if(ext !== '.png' && ext !== '.jpg' && ext !== '.gif' && ext !== '.jpeg') {\n            logger.debug('Invalid image');\n            return callback(new Error('Only images are allowed'))\n        }\n        logger.debug('Uploading image');\n        callback(null, true)\n    }\n});\n\nexport const uploadPostImage = multer({\n    dest: 'posts/raw/',\n    limits: {\n        fileSize: 1024 * 1024\n    },\n    fileFilter: (req, file, callback) => {\n        let ext = path.extname(file.originalname);\n        if(ext !== '.png' && ext !== '.jpg' && ext !== '.gif' && ext !== '.jpeg') {\n            logger.debug('Invalid image');\n            return callback(new Error('Only images are allowed'))\n        }\n        logger.debug('Uploading image');\n        callback(null, true)\n    }\n});\n\nexport const resizeImage = (req,res,next) => {\n    const path = req.file.path;\n    const name = path.split('/')[2];\n\n    sharp(path)\n    .resize(200, 200, {})\n    .toFile('images/r200x200/' + name)\n    .then((_) => {\n        logger.debug('Resizing image to 200x200');\n        sharp(path)\n        .resize(48, 48, {})\n        .toFile('images/r48x48/' + name)\n        .then((_) => {\n            logger.debug('Resizing image to 48x48');\n            next();\n        })\n    })\n    .catch(err => {\n        logger.error('Error in resizing the image: ', err);\n    });\n}\n\nexport const resizePostImage = (req,res,next) => {\n    const path = req.file.path;\n    const name = path.split('/')[2];\n\n    sharp(path)\n    .resize(500, 500, {})\n    .toFile('posts/r500x500/' + name)\n    .then((_) => {\n        logger.debug('Resizing image to 500x500');\n        next();\n    })\n    .catch(err => {\n        logger.error('Error in resizing the image: ', err);\n    });\n}"]}