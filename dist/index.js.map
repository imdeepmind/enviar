{"version":3,"sources":["../app/index.js"],"names":["app","logger","info","config","NODE_ENV","toUpperCase","use","allowedOrigins","WEB_PASS","bodyParser","json","urlencoded","extended","all","req","res","next","method","url","get","status","auth","me","settings","users","interactions","posts","chats","resource","debug","boom","notFound","messages","listen","PORT"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEA;AACAC,iBAAOC,IAAP,4BAAqCC,gBAAOC,QAAP,CAAgBC,WAAhB,EAArC;;AAEA;AACA;;AAEA;AACAL,IAAIM,GAAJ,CAAQ,oBAAK;AACTC,oBAAgB,CAACJ,gBAAOK,QAAR;AADP,CAAL,CAAR;;AAIA;AACAR,IAAIM,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;AACAV,IAAIM,GAAJ,CAAQG,qBAAWE,UAAX,CAAsB;AAC1BC,cAAU;AADgB,CAAtB,CAAR;;AAIA;AACAZ,IAAIM,GAAJ,CAAQ,iCAAR;;AAEA;AACAN,IAAIM,GAAJ,CAAQ,4BAAR;;AAEA;AACAN,IAAIa,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7Bf,qBAAOC,IAAP,wBAAiCY,IAAIG,MAArC,SAA+CH,IAAII,GAAnD;AACA,WAAOF,MAAP;AACH,CAHD;;AAKA;AACAhB,IAAImB,GAAJ,CAAQ,GAAR,EAAa,UAACL,GAAD,EAAMC,GAAN,EAAc;AACvBA,QAAIK,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AACjB,kBAAW,SADM;AAEjB,mBAAY;AAFK,KAArB;AAIH,CALD;;AAOA;AACAV,IAAIM,GAAJ,CAAQ,cAAR,EAAwBe,cAAxB;AACArB,IAAIM,GAAJ,CAAQ,aAAR,EAAuBgB,YAAvB;AACAtB,IAAIM,GAAJ,CAAQ,kBAAR,EAA4BiB,kBAA5B;AACAvB,IAAIM,GAAJ,CAAQ,gBAAR,EAA0BkB,eAA1B;AACAxB,IAAIM,GAAJ,CAAQ,uBAAR,EAAiCmB,sBAAjC;AACAzB,IAAIM,GAAJ,CAAQ,gBAAR,EAA0BoB,eAA1B;AACA1B,IAAIM,GAAJ,CAAQ,eAAR,EAAyBqB,eAAzB;AACA3B,IAAIM,GAAJ,CAAQ,mBAAR,EAA6BsB,kBAA7B;;AAEA;AACA5B,IAAIa,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBd,qBAAO4B,KAAP,CAAa,eAAb;AACH,WAAOd,IAAIe,IAAJ,CAASC,QAAT,CAAkBC,mBAAS,QAAT,CAAlB,CAAP;AACA,CAHD;;AAKA;AACAhC,IAAIiC,MAAJ,CAAW9B,gBAAO+B,IAAlB,EAAwB,YAAM;AAC1BjC,qBAAOC,IAAP,iCAA0CC,gBAAO+B,IAAjD;AACH,CAFD;;kBAIelC,G","file":"index.js","sourcesContent":["import express from 'express';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport expressValidator from 'express-validator';\nimport expressBoom from 'express-boom';\n\nimport logger from './utils/logger';\nimport connect from './utils/db'; \nimport messages from './messages';\n\nimport config from './config/index';\n\nimport auth from './routes/v1/auth';\nimport me from './routes/v1/me';\nimport settings from './routes/v1/settings';\nimport users from './routes/v1/users';\nimport interactions from './routes/v1/interactions';\nimport posts from './routes/v1/posts';\nimport chats from './routes/v1/chats';\nimport resource from './routes/v1/resource';\n\nconst app = express();\n\n// Logging the NODE_ENV\nlogger.info(`The API is running as ${config.NODE_ENV.toUpperCase()}`);\n\n// Connect the db\nconnect();\n\n// Use CORS\napp.use(cors({\n    allowedOrigins: [config.WEB_PASS]\n}));\n\n// Body parser\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\n\n// Validator\napp.use(expressValidator());\n\n// Boom error\napp.use(expressBoom());\n\n// Log Incoming requests\napp.all('*', (req, res, next) => {\n    logger.info(`Incoming request: ${req.method} ${req.url}`);\n    return next();\n});\n\n// Index route\napp.get('/', (req, res) => {\n    res.status(200).json({\n        'status' : 'working',\n        'message' : 'Welcome dude to enviar'\n    })\n})\n\n// Routes\napp.use('/api/v1/auth', auth);\napp.use('/api/v1/me/', me);\napp.use('/api/v1/settings', settings);\napp.use('/api/v1/users/', users);\napp.use('/api/v1/interactions/', interactions);\napp.use('/api/v1/posts/', posts);\napp.use('/api/v1/chats', chats);\napp.use('/api/v1/resource/', resource);\n\n// Handling invalid routes\napp.all('*', (req, res) => {\n    logger.debug('Invalid route');\n\treturn res.boom.notFound(messages['m404.1']);\n});\n\n// The is running at port\napp.listen(config.PORT, () => {\n    logger.info(`The API is running at port ${config.PORT}`);\n});\n\nexport default app;"]}