{"version":3,"sources":["../../app/controller/chats.js"],"names":["getChats","req","res","page","query","limit","me","authData","username","findQuery","$or","$eq","selectedField","_id","author","to","message","createdAt","chatModel","find","skip","err","doc","logger","error","boom","badImplementation","messages","debug","status","json","getChat","mongoose","Schema","Types","ObjectId","params","id","postChat","check","isString","isLength","min","max","errors","validationErrors","badRequest","blocked","userModel","findOne","includes","newChat","body","save","deleteChat","findOneAndRemove","notFound"],"mappings":"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","file":"chats.js","sourcesContent":["import xss from 'xss';\nimport mongoose from 'mongoose';\n\nimport chatModel from '../models/chats';\nimport userModel from '../models/users';\n\nimport logger from '../utils/logger';\nimport messages from '../messages';\n\n\nexport const getChats = (req, res) => {\n    let page = xss(req.query.page);\n    let limit = xss(req.query.limit);\n    \n    if (!page || page < 0) page = 0;\n    if (!limit || limit <= 0) limit = 10;\n\n    const me = xss(req.authData.username);\n    const findQuery = {\n        $or: [\n            {'author' : {$eq: me}},\n            {'to' : {$eq: me}}\n        ]\n    }\n\n    const selectedField = {\n        _id: 1, author: 1, to: 1, message: 1, createdAt: 1\n    }\n\n    chatModel.find(findQuery, selectedField, {limit: limit, skip: page * limit}, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else {\n            logger.debug('Returning some chats');\n            return res.status(200).json(doc);\n        }\n    })\n}\n\nexport const getChat = (req, res) => {\n    const findQuery = {\n        $or: [\n            {'author' : {$eq: me}},\n            {'to' : {$eq: me}}\n        ],\n        _id: mongoose.Schema.Types.ObjectId(req.params.id)\n    }\n\n    const selectedField = {\n        _id: 1, author: 1, to: 1, message: 1, createdAt: 1\n    }\n\n    chatModel.find(findQuery, selectedField, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else {\n            logger.debug('Returning some chats');\n            return res.status(200).json(doc);\n        }\n    })\n}\n\nexport const postChat = (req, res) => {\n    req.check('message', 'Invalid message').isString().isLength({min:4, max:255});\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const findQuery = {\n        'username' : {$eq: xss(req.authData.username)}\n    }\n\n    const selectedField = { _id: 1, blocked: 1 }\n\n    userModel.findOne(findQuery, selectedField, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else {\n            if (doc.blocked.includes(req.params.username)){\n                logger.debug('user blocked');\n                return res.boom.badRequest(messages['m400.3']);\n            } else {\n                const newChat = new chatModel({\n                    _id: new mongoose.Types.ObjectId(),\n                    author: xss(req.authData.username),\n                    to: xss(req.params.username),\n                    message: xss(req.body.message)\n                })\n\n                newChat.save((err, doc) => {\n                    if (err) {\n                        logger.error('Database error: ', err);\n                        return res.boom.badImplementation(messages['m500.0']);\n                    } else {\n                        res.status(201).json({\n                            author: xss(req.authData.username),\n                            to: xss(req.params.username),\n                            message: xss(req.body.message)\n                        })\n                    }\n                })\n            }\n        }\n    })\n}\n\nexport const deleteChat = (req, res) => {\n    const findQuery = {\n        _id: new mongoose.Schema.Types.ObjectId(req.params.id),\n        author: {$eq: req.authData.username}\n    }\n\n    chatModel.findOneAndRemove(findQuery, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc) {\n            return res.status(200).json({\n                id: req.params.id\n            })\n        } else {\n            logger.debug('message don\\'t exist');\n            return res.boom.notFound(messages['m404.m404.2']);\n        }\n    })\n}"]}