{"version":3,"sources":["../../app/controller/auth.js"],"names":["register","req","res","check","isString","isLength","min","max","equals","body","conformPassword","isEmail","isIn","isBefore","custom","date","match","errors","validationErrors","logger","debug","boom","badRequest","messages","data","username","password","email","name","gender","country","dob","findQuery","$or","$eq","what","_id","usersModel","findOne","err","doc","error","badImplementation","then","hash","mongoose","Types","ObjectId","u","save","status","json","catch","login","isAlphanumeric","tokenHash","avatar","update","findOneAndUpdate","_","token","unauthorized","notFound","checkUsername","params","checkEmail"],"mappings":"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","file":"auth.js","sourcesContent":["import xss from 'xss';\nimport mongoose from 'mongoose';\n\nimport usersModel from '../models/users';\nimport { comparePassword, generateHash, generateToken, generatePasswordHash } from '../utils/hash';\nimport logger from '../utils/logger';\nimport messages from '../messages';\n\nexport const register = (req, res) => {\n    req.check('username', 'Invalid username').isString().isLength({min:4, max:24});\n    req.check('password', 'Invalid password').isString().isLength({min:4, max:24}).equals(req.body.conformPassword);\n    req.check('email', 'Invalid email').isString().isLength({min:4, max:255}).isEmail();\n    req.check('name', 'Invalid name').isString().isLength({min:4, max:255});\n    req.check('gender', 'Invalid gender').isString().isIn(['m', 'f', 'o']);\n    req.check('dob', 'Invalid date of birth').isString().isBefore().custom(date => {\n        return date.match(/^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/);\n    });\n    req.check('country', 'Invalid country').isString().isLength({min:4, max:255});\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const data = {\n        username: xss(req.body.username),\n        password: req.body.password,\n        email: xss(req.body.email),\n        name: xss(req.body.name),\n        gender: xss(req.body.gender),\n        country: xss(req.body.country),\n        dob: xss(req.body.dob)\n    }\n\n    const findQuery = {\n        $or: [\n            {'username' : {$eq: data.username}},\n            {'email' : {$eq: data.email}}\n        ]\n    }\n    const what =  {\n        _id: 1\n    }\n\n\n    usersModel.findOne(findQuery, what, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc) {\n            logger.debug(`Username ${data.username} exists in the db`);\n            return res.boom.badRequest(messages['m400.0']);\n        } else {\n            generatePasswordHash(data.password)\n            .then(hash => {\n                data.password = hash;\n                data._id = new mongoose.Types.ObjectId();\n                const u = usersModel(data);\n\n                u.save((err, doc) => {\n                    if (err) {\n                        logger.error('Database error: ', err);\n                        return res.boom.badImplementation(messages['m500.0']);\n                    } else if (doc) {\n                        logger.debug(`User created with username ${doc.username}`);\n                        return res.status(201).json({\n                            name: doc.name,\n                            username: doc.username,\n                            email: doc.email,\n                            country: doc.country,\n                            dob: doc.dob,\n                            gender: doc.gender,\n                        })\n                    }\n                })\n            })\n            .catch(err => {\n                logger.error('Bcrypt error', err);\n                return res.boom.badImplementation(messages['m500.0']);\n            })\n            \n\n            \n        }\n    })\n}\n\nexport const login = (req, res) => {\n    req.check('username', 'Invalid username').isString().isLength({min:4, max:24}).isAlphanumeric();\n    req.check('password', 'Invalid password').isString().isLength({min:4, max:24}).isAlphanumeric();\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const data = {\n        username: xss(req.body.username),\n        password: req.body.password,\n    }\n\n    const findQuery = {\n        'username' : {$eq: data.username}\n    }\n\n    const what = {\n        _id: 1, username: 1, password: 1, tokenHash: 1, name: 1, avatar: 1\n    }\n\n    usersModel.findOne(findQuery, what, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc) {\n            comparePassword(doc.password, data.password)\n            .then(h => {\n                let hash = '';\n                if (doc.tokenHash)\n                    hash = doc.tokenHash;\n                else \n                    hash = generateHash();\n\n                const update = {\n                    tokenHash: hash\n                }\n\n                usersModel.findOneAndUpdate(findQuery, update, (err, _) => {\n                    if (err) {\n                        logger.error('Database error: ', err);\n                        return res.boom.badImplementation(messages['m500.0']);\n                    } else if (_) {\n                        logger.debug('Login successful');\n                        const token = generateToken(doc.name, doc.username, hash, doc.avatar, doc._id);\n                        return res.status(202).json({\n                            token: token\n                        })\n                    }\n                })    \n            }) \n            .catch(_ => {\n                logger.debug('Wrong password');\n                return res.boom.unauthorized(messages['m401.0']);\n            })\n        } else {\n            logger.debug(`User with ${data.username} does not exist`);\n            return res.boom.notFound(messages['m404.0']);\n        }\n    })\n    \n}\n\nexport const checkUsername = (req, res) => {\n    req.check('username', 'Invalid username').isString().isLength({min:4, max:24}).isAlphanumeric();\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const data = {\n        username: xss(req.params.username)\n    }\n\n    const findQuery = {\n        'username' : {$eq: data.username}\n    }\n\n    const what = {\n        _id: 1,\n    }\n\n    usersModel.findOne(findQuery, what, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc) {\n            logger.debug(`User with username ${data.username} exist`);\n            return res.status(200).json({\n                'message' : messages['m201.1'],\n                'data': true\n            })\n        } else {\n            logger.debug(`User with username ${data.username} does not exist`);\n            return res.boom.notFound(messages['m404.0']);\n        }\n    })\n}\n\nexport const checkEmail = (req, res) => {\n    req.check('email', 'Invalid email').isString().isLength({min:4, max:255}).isEmail();\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const data = {\n        email: xss(req.params.email)\n    }\n\n    const findQuery = {\n        'email' : {$eq: data.email}\n    }\n\n    const what = {\n        _id: 1,\n    }\n\n    usersModel.findOne(findQuery, what, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc) {\n            logger.debug(`User with email ${data.email} exist`);\n            return res.status(200).json({\n                'message' : messages['m201.1'],\n                'data': true\n            })\n        } else {\n            logger.debug(`User with email ${data.email} does not exist`);\n            return res.boom.notFound(messages['m404.0']);\n        }\n    })\n}\n"]}