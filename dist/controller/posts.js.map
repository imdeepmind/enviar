{"version":3,"sources":["../../app/controller/posts.js"],"names":["getPosts","req","res","page","Number","query","limit","console","log","skip","selectedField","author","content","caption","createdAt","updatedAt","_id","postModel","find","err","doc","logger","error","boom","badImplementation","messages","debug","status","json","getPotsById","findQuery","$eq","params","id","findOne","addPost","check","isString","isLength","min","max","optional","errors","validationErrors","badRequest","data","mongoose","Types","ObjectId","authData","username","file","filename","body","post","save","editPost","Date","findOneAndUpdate","notFound","deletePost","findOneAndRemove","deleted"],"mappings":"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","file":"posts.js","sourcesContent":["import xss from 'xss';\nimport mongoose from 'mongoose';\n\nimport postModel from '../models/posts';\nimport logger from '../utils/logger';\nimport messages from '../messages';\n\nexport const getPosts = (req, res) => {\n    let page = Number(xss(req.query.page));\n    let limit = Number(xss(req.query.limit));\n    \n    if (!page || page < 0) page = 0;\n    if (!limit || limit <= 0) limit = 10;\n\n    console.log({limit: limit, skip: page * limit})\n\n    const selectedField = {\n        author: 1, content: 1, caption: 1, createdAt: 1, updatedAt: 1, _id: 1\n    }\n\n    postModel.find({}, selectedField, {limit: limit, skip: page * limit}, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else {\n            logger.debug('Returning some posts');\n            return res.status(200).json(doc);\n        }\n    })\n}\n\nexport const getPotsById = (req, res) => {\n    const findQuery = {\n        _id: {$eq: xss(req.params.id)}\n    }\n\n    const selectedField = {\n        author: 1, content: 1, caption: 1, createdAt: 1, updatedAt: 1, _id: 1\n    }\n\n    postModel.findOne(findQuery, selectedField, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else {\n            logger.debug('Returning some posts');\n            return res.status(200).json(doc);\n        }\n    })\n}\n\nexport const addPost = (req, res) => {\n    req.check('caption', 'Invalid caption').isString().isLength({min:4, max:255}).optional();\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const data = {\n        _id:  new mongoose.Types.ObjectId(),\n        author: xss(req.authData.username),\n        content: req.file.filename,\n        caption: xss(req.body.caption)\n    }\n\n    const post = new postModel(data);\n\n    post.save((err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc) {\n            logger.debug(`Post added`);\n            return res.status(201).json({\n                _id: doc._id,\n                author: doc.author,\n                content: doc.content,\n                caption: doc.caption,\n                createdAt: doc.createdAt,\n                updatedAt: doc.updatedAt\n            });\n        }\n    })\n}\n\nexport const editPost = (req, res) => {\n    req.check('caption', 'Invalid caption').isString().isLength({min:4, max:255});\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const findQuery = {\n        _id: {$eq: mongoose.Types.ObjectId(req.params.id)}\n    }\n\n    let data = {};\n\n    if (req.body.caption) data['caption'] = xss(req.body.caption);\n\n    data['updatedAt'] = Date();\n\n    postModel.findOneAndUpdate(findQuery, data, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc){\n            return res.status(201).json(data);\n        } else {\n            logger.debug(`Post with ${req.params.id} does not exist`);\n            return res.boom.notFound(messages['m404.0']);\n        }\n    })\n}\n\nexport const deletePost = (req, res) => {\n    const findQuery = {\n        _id: {$eq: mongoose.Types.ObjectId(req.params.id)}\n    }\n\n    postModel.findOneAndRemove(findQuery, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc){\n            return res.status(204).json({\n                deleted: req.params.id\n            });\n        } else {\n            logger.debug(`Post with ${req.params.id} does not exist`);\n            return res.boom.notFound(messages['m404.0']);\n        }\n    })\n}"]}