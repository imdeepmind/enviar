{"version":3,"sources":["../../app/controller/posts.js"],"names":["getPosts","req","res","page","Number","query","limit","postModel","aggregate","$lookup","from","localField","foreignField","as","$project","$match","$or","$eq","authData","username","$sort","$skip","$limit","exec","err","doc","logger","error","boom","badImplementation","messages","debug","status","json","getPotsById","findQuery","_id","params","id","selectedField","author","content","caption","createdAt","updatedAt","findOne","addPost","check","isString","isLength","min","max","optional","errors","validationErrors","badRequest","data","mongoose","Types","ObjectId","file","filename","body","post","save","editPost","Date","findOneAndUpdate","notFound","deletePost","findOneAndRemove","deleted"],"mappings":"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","file":"posts.js","sourcesContent":["import xss from 'xss';\nimport mongoose from 'mongoose';\n\nimport postModel from '../models/posts';\nimport logger from '../utils/logger';\nimport messages from '../messages';\n\nexport const getPosts = (req, res) => {\n    let page = Number(xss(req.query.page));\n    let limit = Number(xss(req.query.limit));\n    \n    if (!page || page < 0) page = 0;\n    if (!limit || limit <= 0) limit = 10;\n\n    postModel.aggregate([\n        {\n            $lookup: {\n                from: 'users',\n                localField : 'author',\n                foreignField : 'username',\n                as: 'author'\n            }\n        }, \n        {\n            $project: {\n                '_id' : 1,\n                'content' : 1,\n                'caption' : 1,\n                'createdAt': 1, \n                'updatedAt': 1,\n                'author._id' : 1,\n                \"author.username\" : 1,\n                'author.avatar' : 1\n            }\n        },\n        {\n            $match: {\n                $or: [\n                    {\"author.followers\" : {$eq: req.authData.username}},\n                    {\"author.username\" : {$eq: req.authData.username}}\n                ]\n            }\n        },\n        {\n            $sort: {\"updatedAt\": -1}\n        },\n        {\n            $skip: page * limit\n        },\n        {\n            $limit: limit\n        },\n    ]).exec((err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else {\n            logger.debug('Returning some posts');\n            return res.status(200).json(doc);\n        }\n    })\n}\n\nexport const getPotsById = (req, res) => {\n    const findQuery = {\n        _id: {$eq: xss(req.params.id)}\n    }\n\n    const selectedField = {\n        author: 1, content: 1, caption: 1, createdAt: 1, updatedAt: 1, _id: 1\n    }\n\n    postModel.findOne(findQuery, selectedField, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else {\n            logger.debug('Returning some posts');\n            return res.status(200).json(doc);\n        }\n    })\n}\n\nexport const addPost = (req, res) => {\n    req.check('caption', 'Invalid caption').isString().isLength({min:4, max:255}).optional();\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const data = {\n        _id:  new mongoose.Types.ObjectId(),\n        author: xss(req.authData.username),\n        content: req.file.filename,\n        caption: xss(req.body.caption)\n    }\n\n    const post = new postModel(data);\n\n    post.save((err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc) {\n            logger.debug(`Post added`);\n            return res.status(201).json({\n                _id: doc._id,\n                author: doc.author,\n                content: doc.content,\n                caption: doc.caption,\n                createdAt: doc.createdAt,\n                updatedAt: doc.updatedAt\n            });\n        }\n    })\n}\n\nexport const editPost = (req, res) => {\n    req.check('caption', 'Invalid caption').isString().isLength({min:4, max:255});\n\n    const errors = req.validationErrors();\n    if (errors) {\n        logger.debug('Validation didn\\'t succeed');\n        return res.boom.badRequest(messages['m400.2'], errors);\n    }\n\n    const findQuery = {\n        _id: {$eq: mongoose.Types.ObjectId(req.params.id)}\n    }\n\n    let data = {};\n\n    if (req.body.caption) data['caption'] = xss(req.body.caption);\n\n    data['updatedAt'] = Date();\n\n    postModel.findOneAndUpdate(findQuery, data, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc){\n            return res.status(201).json(data);\n        } else {\n            logger.debug(`Post with ${req.params.id} does not exist`);\n            return res.boom.notFound(messages['m404.0']);\n        }\n    })\n}\n\nexport const deletePost = (req, res) => {\n    const findQuery = {\n        _id: {$eq: mongoose.Types.ObjectId(req.params.id)}\n    }\n\n    postModel.findOneAndRemove(findQuery, (err, doc) => {\n        if (err) {\n            logger.error('Database error: ', err);\n            return res.boom.badImplementation(messages['m500.0']);\n        } else if (doc){\n            return res.status(204).json({\n                deleted: req.params.id\n            });\n        } else {\n            logger.debug(`Post with ${req.params.id} does not exist`);\n            return res.boom.notFound(messages['m404.0']);\n        }\n    })\n}"]}