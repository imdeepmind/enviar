{"version":3,"sources":["../../app/utils/hash.js"],"names":["generateHash","length","config","HASH_LENGTH","text","possible","i","charAt","Math","floor","random","generatePasswordHash","deferred","Q","defer","bcrypt","hash","password","err","reject","resolve","promise","comparePassword","old_pass","new_pass","compare","generateToken","name","username","avatar","id","token","jwt","sign","obj_id","JWT_TOKEN","expiresIn"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEO,IAAMA,sCAAe,SAAfA,YAAe,GAAM;AAC9B,QAAMC,SAASC,iBAAOC,WAAtB;AACA,QAAIC,OAAO,EAAX;AACA,QAAMC,WAAW,gEAAjB;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,MAApB,EAA4BK,GAA5B;AACIF,gBAAQC,SAASE,MAAT,CAAgBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBL,SAASJ,MAApC,CAAhB,CAAR;AADJ,KAGA,OAAOG,IAAP;AACH,CATM;;AAWA,IAAMO,sDAAuB,SAAvBA,oBAAuB,WAAY;AAC5C,QAAMC,WAAWC,YAAEC,KAAF,EAAjB;;AAEAC,qBAAOC,IAAP,CAAYC,QAAZ,EAAsB,EAAtB,EAA0B,UAACC,GAAD,EAAMF,IAAN,EAAe;AACrC,YAAIE,GAAJ,EAAS;AACLN,qBAASO,MAAT,CAAgB,QAAhB;AACH,SAFD,MAEO,IAAIH,IAAJ,EAAU;AACbJ,qBAASQ,OAAT,CAAiBJ,IAAjB;AACH;AACJ,KAND;;AAQA,WAAOJ,SAASS,OAAhB;AACH,CAZM;;AAcA,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACC,QAAD,EAAWC,QAAX,EAAwB;AACnD,QAAMZ,WAAWC,YAAEC,KAAF,EAAjB;AACAC,qBAAOU,OAAP,CAAeD,QAAf,EAAyBD,QAAzB,EAAmC,UAACL,GAAD,EAAMF,IAAN,EAAe;AAC9C,YAAIE,GAAJ,EAAS;AACLN,qBAASO,MAAT,CAAgB,QAAhB;AACH,SAFD,MAEO,IAAIH,IAAJ,EAAU;AACbJ,qBAASQ,OAAT,CAAiBJ,IAAjB;AACH;AACDJ,iBAASO,MAAT,CAAgB,QAAhB;AACH,KAPD;;AASA,WAAOP,SAASS,OAAhB;AACH,CAZM;;AAcA,IAAMK,wCAAgB,SAAhBA,aAAgB,CAACC,IAAD,EAAOC,QAAP,EAAiBZ,IAAjB,EAAuBa,MAAvB,EAA+BC,EAA/B,EAAsC;AAC/D,QAAMC,QAAQC,uBAAIC,IAAJ,CAAS;AACnBN,cAAMA,IADa;AAEnBC,kBAAUA,QAFS;AAGnBZ,cAAMA,IAHa;AAInBa,gBAAQA,MAJW;AAKnBK,gBAAQJ;AALW,KAAT,EAMX5B,iBAAOiC,SANI,EAMO,EAAEC,WAAW,IAAb,EANP,CAAd;;AAQA,WAAOL,KAAP;AACH,CAVM","file":"hash.js","sourcesContent":["import bcrypt from 'bcrypt';\nimport Q from 'q';\nimport jwt from 'jsonwebtoken';\n\nimport config from '../config';\n\nexport const generateHash = () => {\n    const length = config.HASH_LENGTH;\n    let text = \"\";\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < length; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n}\n\nexport const generatePasswordHash = password => {\n    const deferred = Q.defer();\n\n    bcrypt.hash(password, 10, (err, hash) => {\n        if (err) {\n            deferred.reject('m500.0');\n        } else if (hash) {\n            deferred.resolve(hash);\n        }\n    })\n\n    return deferred.promise;\n}\n\nexport const comparePassword = (old_pass, new_pass) => {\n    const deferred = Q.defer();\n    bcrypt.compare(new_pass, old_pass, (err, hash) => {\n        if (err) {\n            deferred.reject('m500.0');\n        } else if (hash) {\n            deferred.resolve(hash);\n        }\n        deferred.reject('m401.0');\n    })\n\n    return deferred.promise;\n}\n\nexport const generateToken = (name, username, hash, avatar, id) => {\n    const token = jwt.sign({\n        name: name,\n        username: username,\n        hash: hash,\n        avatar: avatar,\n        obj_id: id,\n    }, config.JWT_TOKEN, { expiresIn: '3d' })\n\n    return token;\n}"]}